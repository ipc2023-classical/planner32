#! /bin/bash

## Set these variables to 1/0 do enable/disable the individual sanity
## tests. Note that the "UNPACK" and "COMPILE" tests are prerequisites
## for the following tests.

SANITY_TEST_UNPACK=1
SANITY_TEST_COMPILE=1
SANITY_TEST_RUN_STRIPS=1
SANITY_TEST_RUN_STRIPS_UNSAT=1
SANITY_TEST_RUN_AXIOMS=0


set -o errexit

if [[ $# != 2 ]]; then
    echo need exactly two arguments: seq-opt-bjolp 32, \
         seq-sat-lama-2011 64 or some such
    exit 2
fi

DIST=$1
WORDSIZE=$2

PLANNER_NAME="$DIST"

PACKAGE=$DIST.tar.gz

echo "Making sure destination is clear..."
mkdir $DIST

echo "Exporting code..."
hg archive -I 're:src\/translate\/' $DIST
hg archive -I 're:src\/preprocess\/' $DIST
hg archive -I 're:src\/search\/' $DIST
hg archive -I 're:src\/build_all' $DIST
hg archive -I 're:src\/plan' $DIST
hg id -i >> $DIST/src/VERSION
echo "$WORDSIZE bit" >> $DIST/src/VERSION

echo "Preparing distribution directory..."
echo '#! /bin/bash' > $DIST/build
echo 'cd src; ./build_all; cd ..' > $DIST/build
chmod 755 $DIST/build

cat > $DIST/plan << EOF
#! /bin/bash
DOMAIN="\$1"
PROBLEM="\$2"

"$(dirname "$0")"/src/plan "\$DOMAIN" "\$PROBLEM" "ipc" "$PLANNER_NAME" > log 2> err

last=\`tail -1 log\`
last2=\`tail -2 log | grep solvable\`

if [[ "\$last" == "unsolvable"  ]] || [[ "\$last2" == "unsolvable"  ]];
then
    echo "unsolvable"
else if [[ "\$last" == "solvable" ]] || [[ "\$last2" == "solvable"  ]];
then
    echo "solvable"
else
    echo "unknown"
fi
fi

EOF

chmod 755 $DIST/plan

echo "Removing LP code..."
rm -r $DIST/src/search/lp

if [[ "$WORDSIZE" == "32" ]]; then
    echo "Changing -m64 compiler option to -m32"
    sed -i -e "s/-m64/-m32/g" $DIST/src/preprocess/Makefile
    sed -i -e "s/-m64/-m32/g" $DIST/src/search/Makefile
elif [[ "$WORDSIZE" == "64" ]]; then
    echo "Changing -m32 compiler option to -m64"
    sed -i -e "s/-m32/-m64/g" $DIST/src/preprocess/Makefile
    sed -i -e "s/-m32/-m64/g" $DIST/src/search/Makefile
else
    echo "Second parameter must be 32 or 64"
    exit 2
fi

# Packaging
echo "Packaging..."
rm -f $PACKAGE
tar czf $PACKAGE $DIST/
rm -rf $DIST

# Sanity tests

DIR="$(cd "$(dirname "$0")" && pwd)"
BENCHMARKS="$DIR/../benchmarks"
VALIDATOR="$DIR/../src/VAL/validate"

function planner-test-run () {
    DOMAIN="$BENCHMARKS/$1"
    PROBLEM="$BENCHMARKS/$2"
    echo "Sanity test: $DOMAIN $PROBLEM ..."
    ./plan "$DOMAIN" "$PROBLEM" sas_plan
    for PLAN in $(ls sas_plan*); do
        "$VALIDATOR" "$DOMAIN" "$PROBLEM" "$PLAN"
    done

    rm -f output.sas output sas_plan* plan_numbers_and_cost elapsed.time
}

if [[ "$SANITY_TEST_UNPACK" == 1 ]]; then
    echo "Sanity test: Unpacking package..."
    tar xzf $PACKAGE

    if [[ "$SANITY_TEST_COMPILE" == 1 ]]; then
        echo "Sanity test: Compiling..."
        cd $DIST
        ./build

        if [[ "$SANITY_TEST_RUN_STRIPS" == 1 ]]; then
            planner-test-run nomystery-opt11-strips/domain.pddl nomystery-opt11-strips/p01.pddl
        fi
        if [[ "$SANITY_TEST_RUN_STRIPS" == 1 ]]; then
            planner-test-run unsat-nomystery/domain.pddl unsat-nomystery/nomystery-problem-05-12-15-01.pddl
        fi
        if [[ "$SANITY_TEST_RUN_AXIOMS" == 1 ]]; then
            planner-test-run psr-large/domain.pddl \
                psr-large/p01-s29-n2-l5-f30.pddl
        fi
    fi

    echo "Cleaning up..."
    rm -rf $DIST
fi

echo "Done: $PACKAGE"
